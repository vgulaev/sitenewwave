// Generated by CoffeeScript 1.6.3
(function() {
  var Basket, Item;

  Item = (function() {
    Item._existing = [];

    Item.elem_exist = function(id) {
      var flag, item, _i, _len, _ref;
      flag = false;
      _ref = this._existing;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.id === id) {
          flag = true;
          break;
        }
      }
      if (flag) {
        return item;
      } else {
        return false;
      }
    };

    function Item(id) {
      this.id = id;
      this.set_chars();
      if (this.is_measureable()) {
        this.count = 1;
        this.change_buy_count(this.count);
      } else {
        this.buy_weight = "1";
        this.change_buy_weight(this.buy_weight);
      }
      this.show_modal();
      Item._existing.push(this);
    }

    Item.prototype.is_measureable = function() {
      if (this.length === "0") {
        return false;
      } else {
        return true;
      }
    };

    Item.prototype.get_chars = function() {
      var response;
      response = null;
      $.ajax({
        type: "POST",
        url: "/1cengine/py_scripts/get_item_lwkes.py",
        async: false,
        data: "item_hash=" + this.id,
        success: function(html) {
          response = html;
          return response;
        }
      });
      return response;
    };

    Item.prototype.set_chars = function(chars) {
      var char_array, obj,
        _this = this;
      chars = this.get_chars().replace(/\s+$/g, "");
      char_array = chars.split("|");
      this.length = char_array[0];
      this.weight = char_array[1];
      this.kf = char_array[2];
      this.ed_izm = char_array[3];
      this.stock = char_array[4];
      this.prices = [];
      obj = $("tr[id='" + this.id + "']");
      return $(obj).children().each(function(index, element) {
        if ($(element).attr("class") === "itemName") {
          _this.name = $(element).children("[itemprop='name']").text();
        }
        if ($(element).attr("class") === "itemChar") {
          _this.char = $(element).text();
        }
        if (($(element).attr("class").indexOf("price", 0)) === 0) {
          return _this.prices.push($(element).children("span").text());
        }
      });
    };

    Item.prototype.change_buy_count = function(count) {
      this.buy_count = Math.ceil(count);
      this.buy_length = (this.buy_count * this.length).toFixed(2);
      this.buy_weight = ((this.buy_length * this.weight) / 1000).toFixed(3);
      return this.change_modal();
    };

    Item.prototype.change_buy_length = function(length) {
      this.buy_length = length.replace(/,+/g, ".");
      this.buy_count = this.buy_length / this.length;
      this.change_modal();
      return $(".buy_count").change();
    };

    Item.prototype.change_buy_weight = function(weight) {
      this.buy_weight = weight.replace(/,+/g, ".");
      if (this.is_measureable()) {
        this.buy_length = (this.buy_weight * 1000) / this.weight;
        this.change_modal();
        $(".buy_length").change();
      }
      return this.change_modal();
    };

    Item.prototype.change_modal = function() {
      if (this.is_measureable()) {
        $(".buy_count").val(this.buy_count);
        $(".buy_length").val(this.buy_length);
      }
      $(".buy_weight").val(this.buy_weight);
      return this.change_modal_price();
    };

    Item.prototype.change_modal_price = function() {
      this.price_weight = (+this.prices[0]).toFixed(2);
      if (this.is_measureable()) {
        this.price_length = ((this.price_weight / 1000) * this.weight).toFixed(2);
        this.price_count = (this.price_length * this.length).toFixed(2);
        $(".price_length").html(this.price_length);
        $(".price_count").html(this.price_count);
      }
      $(".price_weight").html(this.price_weight);
      return this.set_final_price();
    };

    Item.prototype.set_final_price = function() {
      this.final_price = (this.buy_weight * this.price_weight).toFixed(2);
      return $(".final_price").html(this.final_price);
    };

    Item.prototype.show_modal = function() {
      var _this = this;
      $.blockUI.defaults.css.borderRadius = '10px';
      $.blockUI.defaults.fadeIn = 100;
      $.blockUI.defaults.fadeOut = 100;
      $.blockUI.defaults.css.backgroundColor = 'white';
      $.blockUI.defaults.css.cursor = 'defaults';
      $.blockUI.defaults.css.boxShadow = '0px 0px 5px 5px rgb(207, 207, 207)';
      $.blockUI.defaults.css.fontSize = '14px';
      $.blockUI.defaults.css.width = '450px';
      $.blockUI.defaults.css.paddingTop = '10px';
      $.blockUI({
        message: this.get_modal()
      });
      $(".blockMsg").draggable();
      $(document).on("keyup", function(e) {
        e.preventDefault();
        if (e.which === 27) {
          return $.unblockUI();
        }
      });
      if (this.is_measureable()) {
        $(".buy_count").bind('change', function(event) {
          return _this.change_buy_count($(".buy_count").val());
        });
        $(".buy_length").bind('change', function(event) {
          return _this.change_buy_length($(".buy_length").val());
        });
      }
      $(".buy_weight").bind('change', function(event) {
        return _this.change_buy_weight($(".buy_weight").val());
      });
      this.change_modal_price();
      $(".add_to_basket").bind('click', function(event) {
        Basket.add_item(_this);
        return $.unblockUI();
      });
      return $(".change_in_basket").bind('click', function(event) {
        Basket.change_item(_this);
        return $.unblockUI();
      });
    };

    Item.prototype.get_modal = function() {
      var c_input, l_input, message, modal_link, w_input;
      if (Basket.is_in_basket(this)) {
        modal_link = '<a class="change_in_basket" href="Изменить" onClick="return false">Изменить</a>';
      } else {
        modal_link = '<a class="add_to_basket" href="Добавить в корзину" onClick="return false">В корзину</a>';
      }
      if (this.is_measureable()) {
        l_input = '<input class="buy_length" pattern="[0-9,\\.]+" value="' + this.buy_length + '" />';
        c_input = '<input class="buy_count" pattern="[0-9]+" value="' + this.buy_count + '" />';
      } else {
        l_input = '<input class="buy_length" value="---" disabled />';
        c_input = '<input class="buy_count" value="---" disabled />';
      }
      w_input = '<input class="buy_weight" pattern="[0-9,\\.]+" value="' + this.buy_weight + '" />';
      message = "<div class=\"buy_item_div\">\n<span class=\"buy_item_name\">" + this.name + " " + this.char + "</span>\n<table class=\"buy_item_table\">\n<tr class=\"buy_item_head\">\n<th></th>\n<th>Метры</th>\n<th>Штуки</th>\n<th>Тонны</th>\n</tr>\n<tr class=\"buy_item_count\">\n<td>Количество</td>\n<td>\n    " + l_input + "\n</td>\n<td>\n    " + c_input + "\n</td>\n<td>\n    " + w_input + "\n</td>\n</tr>\n<tr class=\"buy_item_price\">\n<td>Стоимость за ед.</td>\n<td class=\"price_length\">0</td>\n<td class=\"price_count\">0</td>\n<td class=\"price_weight\">0</td>\n</tr>\n\n</table>\n<div class=\"buy_item_overall\">Итого: <span class=\"final_price\"></span></div>\n<div class=\"basket_item_overall\">*В корзине товар на: <span class=\"basket_price\">" + Basket._sum + "</span></div>\n<span class=\"popUpContinue\">" + modal_link + "</span>\n</div>";
      return message;
    };

    return Item;

  })();

  Basket = (function() {
    Basket._item_list = [];

    Basket._sum = 0;

    Basket._count = 0;

    Basket._total_weight = 0;

    Basket._active_price_measured = 0;

    Basket.is_in_basket = function(item) {
      var index;
      index = this._item_list.indexOf(item);
      if (index === -1) {
        return false;
      } else {
        return true;
      }
    };

    Basket.find_by_id = function(id) {
      var flag, item, _i, _len, _ref;
      flag = false;
      _ref = this._item_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.id === id) {
          flag = true;
          break;
        }
      }
      if (flag) {
        return item;
      } else {
        return false;
      }
    };

    Basket.add_item = function(item) {
      var index;
      index = this._item_list.indexOf(item);
      if (index === -1) {
        this._item_list.push(item);
        this._sum = ((+item.final_price) + (+this._sum)).toFixed(2);
        this._total_weight = ((+item.buy_weight) + (+this._total_weight)).toFixed(3);
        this._count++;
        return this.change_basket();
      }
    };

    Basket.change_item = function(item) {
      var elem, index, _i, _len, _ref, _results;
      index = this._item_list.indexOf(item);
      if (index > -1) {
        this._sum = 0;
        this._total_weight = 0;
        _ref = this._item_list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          this._sum = ((+elem.final_price) + (+this._sum)).toFixed(2);
          this._total_weight = ((+elem.buy_weight) + (+this._total_weight)).toFixed(3);
          _results.push(this.change_basket());
        }
        return _results;
      }
    };

    Basket.delete_item = function(id) {
      var index, item;
      item = this.find_by_id(id);
      index = this._item_list.indexOf(item);
      if (index > -1) {
        this._sum = ((+this._sum) - (+item.final_price)).toFixed(2);
        this._total_weight = ((+this._total_weight) - (+item.buy_weight)).toFixed(3);
        this._count--;
        this._item_list.splice(index, 1);
        return this.change_basket();
      }
    };

    Basket.get_count = function() {
      return this._count;
    };

    Basket.change_basket = function() {
      var item, nds, _i, _len, _ref,
        _this = this;
      $(".basketCount").html(this._count);
      $("#lItemTab").empty();
      _ref = this._item_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        $("#lItemTab").append(this.create_row(item));
        $("tr[name='" + item.id + "']").find(".delete_from_basket").bind("click", function(event) {
          var target;
          target = $(event.currentTarget);
          return _this.delete_item(target.closest("tr").attr("name"));
        });
        $("tr[name='" + item.id + "']").find(".edit_from_basket").bind("click", function(event) {
          var element, target;
          target = $(event.currentTarget);
          element = _this.find_by_id(target.closest("tr").attr("name"));
          element.show_modal();
          return _this.change_basket();
        });
      }
      nds = ((this._sum / 100) * 18).toFixed(2);
      $("#SumGoods").html(this._sum);
      $("#CountAll").html(this._total_weight);
      return $("#NDSAll").html(nds);
    };

    Basket.create_row = function(item) {
      var nds, row;
      nds = ((item.final_price / 100) * 18).toFixed(2);
      return row = "<tr class=\"itemTr\" name=\"" + item.id + "\">\n<td>" + (this._item_list.indexOf(item) + 1) + "</td>\n<td class='itemNameTd'>" + item.name + "\n<span class=\"delEdSpan\">\n<a class=\"delete_from_basket\" href=\"Убрать из корзины\" onClick=\"return false\">X</a>\n<a class=\"edit_from_basket\" href=\"Редактировать\" onClick=\"return false\"><img src=\"/1cengine/site/images/edit.png\" /></a></span></td>\n\n\n<td class='itemCharTd'>" + item.char + "</td>\n\n<td class='itemCountTd'>" + item.buy_weight + "</td>\n<td class='itemEdIzmTd'>" + item.ed_izm + "</td>\n<td class='itemPriceTd'>" + item.price_weight + "</td>\n<td class='itemNdsKfTd'>18%</td>\n<td class='itemNdsSumTd'>" + nds + "</td>\n<td class='itemSumTd'>" + item.final_price + "</td>\n<td class='itemRezkaTd' style='display:none'></td>\n</tr>";
    };

    function Basket(name) {
      this.name = name;
    }

    Basket.on_weight_change_handler = function() {
      return alert("ARRRRGH!!1");
    };

    Basket.watch("_total_weight", function(id, oldval, newval) {
      return this.on_weight_change_handler();
    });

    return Basket;

  })();

  $(document).ready(function() {
    $(".bItem").click(function() {
      var elem_id, item;
      elem_id = $(this).closest("tr").attr("id");
      item = Item.elem_exist(elem_id);
      if (item === false) {
        return item = new Item($(this).closest("tr").attr("id"));
      } else {
        return item.show_modal();
      }
    });
    return $(".oItem").click(function() {
      var elem_id, item;
      elem_id = $(this).closest("tr").attr("id");
      item = Item.elem_exist(elem_id);
      if (item === false) {
        return item = new Item($(this).closest("tr").attr("id"));
      } else {
        return item.show_modal();
      }
    });
  });

}).call(this);
